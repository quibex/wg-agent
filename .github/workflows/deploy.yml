name: Build and Deploy wg-agent

# Триггер: при пуше в ветку main (или master)
on:
  push:
    branches:
      - main
  paths_ignore:
    - 'scripts/health_checker.sh'

jobs:
  build-and-push:
    name: Build Docker Image and Push to Docker Hub
    runs-on: ubuntu-latest

    steps:
      # 1) Получаем код репозитория
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2) Логинимся в Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 3) Собираем Docker-образ и пушим в Docker Hub
      #    Пример: тег myapp:${{ github.sha }} и myapp:latest
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/wg-agent:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/wg-agent:${{ github.sha }}

  deploy-to-server:
    name: Deploy to Production Server
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      # 1) Добавляем приватный ключ в ssh-agent
      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.8.1
        with:
          ssh-private-key: ${{ secrets.SSH_DEPLOY_KEY }}

      # 2) Переменные для SSH (чтобы не ругалось на known_hosts)
      - name: Add server to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
        # SSH_HOST заносится как Secret (пример: 203.0.113.10)

      # 3) Генерируем сертификаты если они не существуют
      - name: Generate server certificate from CA
        env:
          CA_CERT_PEM: ${{ secrets.CA_CERT_PEM }}
          CA_KEY_PEM: ${{ secrets.CA_KEY_PEM }}
        run: |
          scp scripts/make-server-cert.sh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/tmp/
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << EOF
            chmod +x /tmp/make-server-cert.sh
            CA_CERT_PEM="$CA_CERT_PEM" CA_KEY_PEM="$CA_KEY_PEM" /tmp/make-server-cert.sh
            rm /tmp/make-server-cert.sh
          EOF

      # 4) SSH + Docker pull + docker-compose или docker run
      - name: SSH and deploy container
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          TG_TOKEN: ${{ secrets.TG_TOKEN }}
          TG_CHAT_ID: ${{ secrets.TG_CHAT_ID }}
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << EOF
            # Здесь заходим на сервер и выполняем команды:
            cd /opt/wg-agent || exit 1

            # Можно остановить старый контейнер (если есть)
            docker rm -f wg-agent-container || true

            # Забираем свежий образ из Docker Hub
            docker pull $DOCKERHUB_USERNAME/wg-agent:latest

            # Запускаем новый контейнер (перемапить порты, окружение и т.д.)
            docker run -d \
              --name wg-agent-container \
              --restart unless-stopped \
              --network host \
              --cap-add NET_ADMIN \
              --device /dev/net/tun \
              -v /etc/wg-agent:/etc/wg-agent:ro \
              -e WG_AGENT_INTERFACE=\$WG_AGENT_INTERFACE \
              -e WG_AGENT_ADDR=\$WG_AGENT_ADDR \
              -e WG_AGENT_HTTP_ADDR=\$WG_AGENT_HTTP_ADDR \
              -e WG_AGENT_RATE_LIMIT=\$WG_AGENT_RATE_LIMIT \
              $DOCKERHUB_USERNAME/wg-agent:latest

            echo "export TG_TOKEN=$TG_TOKEN" >> /etc/environment
            echo "export TG_CHAT_ID=$TG_CHAT_ID" >> /etc/environment
          EOF

  update-health-checker:
    name: Update Health Checker Script
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, 'scripts/health_checker.sh')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.8.1
        with:
          ssh-private-key: ${{ secrets.SSH_DEPLOY_KEY }}

      - name: Add server to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy health checker script
        env:
          TG_TOKEN: ${{ secrets.TG_TOKEN }}
          TG_CHAT_ID: ${{ secrets.TG_CHAT_ID }}
        run: |
          scp scripts/health_checker.sh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/opt/wg-agent/
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << EOF
            chmod +x /opt/wg-agent/health_checker.sh
            
            crontab -l | grep -v health_checker || true > temp_cron
            echo "*/5 * * * * . /etc/environment; /opt/wg-agent/health_checker.sh" >> temp_cron
            crontab temp_cron
            rm temp_cron
          EOF
